" For ideavim supported plugins see:
"https://github.com/JetBrains/ideavim/blob/master/doc/IdeaVim%20Plugins.md"
" Use the :action IdeaVim.ReloadVimRc.reload command to reload your config file

" To find action ids, double shift, then search for 'track action IDs'
"https://github.com/JetBrains/ideavim/tree/master?tab=readme-ov-file#finding-action-ids
" or  keymap pattern (E.g. :actionlist extract, :actionlist <C-D)

"https://towardsdatascience.com/the-essential-ideavim-remaps-291d4cd3971b

" sourcing my .vimrc seems to cause too many conflicts:
"source ~/.vimrc

""" Map leader to space ---------------------
let mapleader=" "

""" Plugins  --------------------------------
" Note can use the fully qualified syntax with Plug or set xxx
"set surround
"set commentary
"set highlightedyank
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'machakann/vim-highlightedyank'
Plug 'kana/vim-textobj-entire'
Plug 'vim-scripts/argtextobj.vim'
"Plug 'vim-scripts/ReplaceWithRegister'

" mc start multi cursor
" mc next match
" mx skip next match
" mp remove current match and go back to current one
" https://www.youtube.com/watch?v=2jUQRaC0pis
" https://github.com/terryma/vim-multiple-cursors?tab=readme-ov-file
"Plug 'terryma/vim-multiple-cursors'
"map mc <A-n>
"map mx <A-x>
"map mp <A-p>

"" NERDTree plugin - emulates NERDTree
" Basic commands:
"   <leader>t      Open NERDTree (mapped below)
"   o or Enter     Open files, directories, bookmarks
"   go             Open selected, but leave cursor in the NERDTree
"   i              Open selected file in new horizontal split
"   gi             Same as i, but leave cursor on NERDTree
"   s              Open file in new vsplit
"   gs             Same as s, but leave cursor on NERDTree
"   t              Open file in new tab
"   <C-J>          Jump down to next sibling of current selected dir
"   <C-K>          Jump to previous sibling of current selected dir
"   R              Recursively refresh the current root
"   m              Display the NERDTree menu (e.g. for new file, dir etc)
Plug 'preservim/nerdtree'
"map <c-n> :NERDTree<CR>
map <leader>t :NERDTreeToggle<CR>
"map <leader>t :NERDTree<CR>
" to exit nerdtree: 'q'
" to jump from nerdtree back to editor pane: 'Esc'

set which-key
set notimeout
"set multiple-cursors
"set argtextobj
"set easymotion
"set textobj-entire
"set ReplaceWithRegister

""" Common settings -------------------------
set showmode
set hls
" so - scrolloff - minimum number of lines above and below the cursor
set so=5
set incsearch
set ignorecase
set smartcase
" set number
set nu
"set relativenumber
"show (partial) command in the status bar
set showcmd
" Sync IJ bookmarks and Vim marks:
set ideamarks
" visualbell instead of beeping"
set visualbell
" smart IJ joining for code, is language specific, e.g. if Joining 'Hello World' string on two lines, the join will
" remove the + and nested " chars. See: https://github.com/JetBrains/ideavim/blob/master/doc/ideajoin-examples.md
"
" "Hello" +                 ->       "Hello world"
 " world!"

set ideajoin
set clipboard+=unnamed
set clipboard+=ideaput
set scrolloff=5

let g:WhichKey_ShowVimActions = "true"

nnoremap \e :e ~/.ideavimrc<CR>
nnoremap \r :action IdeaVim.ReloadVimRc.reload<CR>

" -- Example Mappings
"map <leader>f <Plug>(easymotion-s)
"map <leader>e <Plug>(easymotion-f)
"map <leader>d <Action>(Debug)
"map <leader>r <Action>(RenameElement)
"map <leader>c <Action>(Stop)
"map <leader>z <Action>(ToggleDistractionFreeMode)
"map <leader>s <Action>(SelectInProjectView)
"map <leader>a <Action>(Annotate)
"map <leader>h <Action>(Vcs.ShowTabbedFileHistory)
"map <S-Space> <Action>(GotoNextError)
"map <leader>b <Action>(ToggleLineBreakpoint)
"map <leader>o <Action>(FileStructurePopup)

"map <leader>t <Action>(SelectInProjectView)
map <leader>a <Action>(Annotate)
"map <S-Space> <Action>(GotoNextError)
map <leader>o <Action>(FileStructurePopup)

nmap <leader>i <Action>(Generate)
"nnoremap <leader><leader> <C-Tab>

map <leader>\| <Action>(SplitVertically)
map <leader>- <Action>(SplitHorizontally)
map <leader>" <Action>(SplitHorizontally)
let gWhichKeyDesc_window_vsplit = "<leader>| split vertical"
let g:WhichKeyDesc_window_hsplit = "<leader>- split horizontal"
let g:WhichKeyDesc_window_hsplit = "<leader>\" split horizontal"
"sethandler <c-m> a:vim
"nnoremap <c-m> :action MoveEditorToOppositeTabGroup<CR>

" Simulate Chris Toomey's navigation between windows and splits using same remaps
sethandler <c-j> a:vim
sethandler <c-k> a:vim
sethandler <c-h> a:vim
sethandler <c-l> a:vim
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <TAB> :action NextTab<CR>
nnoremap <s-TAB> :action PreviousTab<CR>


nnoremap <c-t> :action ActivateTerminalToolWindow<CR>
nnoremap <leader>T :action Terminal.OpenInTerminal<CR>
" To minimize the terminal, Esc so focus is on buffer tab then '<leader>wm' to maximize buffer
" TODO: Increase/decrease split/term/project width/height
"map <c-space>k :action DecrementWindowHeight<CR> "this affects whole IJ window
"map <c-space>j :action IncrementWindowHeight<CR>

" Close tab/window
nnoremap <Leader>q :action CloseContent<CR>
nnoremap <Leader>qa :action CloseAllEditors<CR>
let g:WhichKeyDesc_bufferPrefix = "<leader>b Buffer prefix"
let g:WhichKeyDesc_windowPrefix = "<leader>w Window prefix"
map <leader>bd <Action>(CloseContent)
map <leader>wd <Action>(CloseContent)
let g:WhichKeyDesc_closeTabWindow = "<leader>bd Close/del window/tab"
let g:WhichKeyDesc_closeTabWindow = "<leader>wd Close/del window/tab"
" Toggle maximise tab / window
" Maps to Intellij's HidAllWindows, the default keymap is: Cmd Shift F12
map <leader>wm <Action>(HideAllWindows)
let g:WhichKeyDesc_HideAllTabWindow = "<leader>wm Toggle maximise current window"

" Simulate Telescope's switch open buffer/window
"map <leader>, <Action>(RecentFiles)
map <leader>, <Action>(Switcher)
let g:WhichKeyDesc_Switcher = "<leader>, Switcher"
" Simulate Telescope's search
let g:WhichKeyDesc_find = "<leader>f Find prefix"
"map <leader>ff <Action>(GotoFile)
"let g:WhichKeyDesc_findfiles = "<leader>ff Find Files"
map <leader>fa <Action>(SearchEverywhere)
let g:WhichKeyDesc_FindEverywhere = "<leader>fa Find Everywhere"
map <leader>ff <Action>(GotoFile)
let g:WhichKeyDesc_FindFiles = "<leader>ff Find Files"


" Code changes / LSP
" K for Hover Quick Documentation (not only for java, all languages)
"map <leader>x <Action>(ShowHoverInfo)
"let g:WhichKeyDesc_hoverInfo = "<leader>x Hover Show Info"
map K <Action>(ShowHoverInfo)
let g:WhichKeyDesc_HoverInfo = "K Show Hover Info"
let g:WhichKeyDesc_codeprefix = "<leader>c Code prefix"
map <leader>ci <Action>(QuickImplementations)
map <leader>cd <Action>(ShowIntentionActions)
nmap <leader>i <action>(Generate)
map <leader>cr <Action>(RenameElement)
nnoremap <leader>ca :action Refactorings.QuickListPopupAction<CR>
let g:WhichKeyDesc_quickImpls = "<leader>ci Show Implementations"
let g:WhichKeyDesc_codeDiagnostics = "<leader>cd Code Diagnostics (IntentionActions)"
let g:WhichKeyDesc_rename = "<leader>cr Code rename"
let g:WhichKeyDesc_generate = "<leader>i Generate"
let g:WhichKeyDesc_codeAction = "<leader>ca Code Action / Refactoring Quick List"

" Refactorings
nnoremap <leader>r :action Refactorings.QuickListPopupAction<CR>
nnoremap <Leader>= :action ReformatCode<CR>
nnoremap <leader>l :action RecentLocations<CR>
nnoremap <leader>h :action LocalHistory.ShowHistory<CR>
"nmap <leader>s <action>(QuickChangeScheme)
"nnoremap <leader>o :action OptimizeImports<CR>

" Goto LSP jumps
" Recreate LazyVim's LSP shortcuts (note NO <leader>, causes some issues
" in that you need to press Esc )
" Need to press <ESC> after using next mapping so the dialogue pops up
let g:WhichKeyDesc_goPrefix = "g Goto LSP prefix"
nmap gR <Action>(FindUsages)
nmap gr <Action>(ShowUsages)
nmap gD <Action>(GotoDeclaration)
nmap gI <Action>(GotoImplementation)
let g:WhichKeyDesc_goUsages = "gr Goto Refs/FindUsages Inline"
let g:WhichKeyDesc_goUsages = "gR Goto Refs/Usages Pane"
let g:WhichKeyDesc_goDeclarations = "gD Goto Declarations"
let g:WhichKeyDesc_goImpl = "gI Goto Implementations"


" Navigate next/previous - I want to use square brackets for navigation, but ideavim has bugs
" https://youtrack.jetbrains.com/issues?q=project:%20IdeaVim%20square%20bracket
"
"map ]e <Action>(GotoNextError)
"map [e <Action>(GotoPreviousError)
"nnoremap ]e  :action GotoNextError<CR>
"nnoremap [e  :action GotoPreviousError<CR>
"nmap ]e  :action GotoNextError<CR>
"nmap [e  :action GotoPreviousError<CR>
nnoremap ge  :action GotoNextError<CR>
nnoremap gE  :action GotoPreviousError<CR>
let g:WhichKeyDesc_nextIssue =  " ]e Next Issue"
let g:WhichKeyDesc_prevIssue = "[e Prev Issue"

" VCS Changes
" next/prev hunk (note, the square brackets work but not for navigating errors, above)
map ]c <Action>(VcsShowNextChangeMarker)
map [c <Action>(VcsShowPrevChangeMarker)
let g:WhichKeyDesc_nextVcsChange = "]c Next VCS change"
let g:WhichKeyDesc_prevVcsChange = "[c Prev VCS change"

let g:WhichKeyDesc_git = "<leader>g Git prefix"
nmap <leader>gM <action>(Git.Menu)
let g:WhichKeyDesc_gitMenu = "<leader>gM Git Menu"
nmap <leader>gp <Action>(VcsShowCurrentChangeMarker)
let g:WhichKeyDesc_gitShowChangeHunk = "<leader>gp Git Preview Hunk"

" Use ctrl-c (copy) as an ide shortcut in normal and visual modes, and vim in insert mode
" For handlers see: https://github.com/JetBrains/ideavim/blob/master/doc/sethandler.md
sethandler <C-C> n-v:ide i:vim

inoremap jj <Esc>
" clean delete
vnoremap <leader>d "_d
" clean delete and paste
vnoremap <leader>p "_dP

" yank visual selection into * register
vnoremap <leader>y "*y
nnoremap <leader>y "*y
" yank whole file into * register
nnoremap <leader>Y gg"+yG


" Move visual selection up & down
" =================================
" so, for J, move (:m) end of visual selection ('>) one line down then enter
" (<CR> / carridage return) and select previous vis selection
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv
"vim.keymap.set("v", "J", ":m '>+1<CR>gv=gv", { noremap = true })
"vim.keymap.set("v", "K", ":m '<-2<CR>gv=gv", { noremap = true })


